The following directory contains tools for helping allocate values for 
identifiers in the OASIS PKCS #11 spec. Under the current TC policy, these 
identifier values are allocated by the TC co-chairs and handed off to the 
proposers when their spec nears the time for TC balloting.

These are only tools to help the co-chairs manage allocating identifier values
for proposals. The official identifier values can be found in the balloted
proposals on the OASIS PKCS #11 page.

The tools in this directory include:
1) sample.prop - a sample proposal
2) ./process_proposal.pl - perl script to allocate idenifiers for a proposal.
3) ./approve_proposal.pl - perl script to move proposed mechanisms to approved mechanisms
4) ./release.pl - perl script to move approved identifiers to spec identifies.
5) ./verify.pl - perl script to verify the integrity of the database.
6) raw_ids.db - database of allocated identifiers.

-----------------------------------------------------------------

How to allocate identifiers for a new proposal:

1)  Create a new proposal. Proposals have:
   1.1) first line is the proposal name
   1.2) type of identifier. you can list the types with:
           $ ./verify.pl types
   1.3) list of identifiers and proposed values of the form:
           #define <identifier> <value>
    value must be a hex value. If value is zero, then a new identifer value
    will be allocated.
   1.4) optionally next type of identifer, followed by it's list.
     Blank lines are ignored.

2) pull the git repository.
3) run ./process_proposal.pl as follows:
	$ ./process_proposal.pl myproposal.prop myproposal.result
4) git add raw_ids.db
5) commit and push raw_ids.db
6) send myproposal.result to the other co-chair and the proposer.

-----------------------------------------------------------------

How to mark identifiers approved once the proposal passes the ballot.

run ./approve_proposal.pl myproposal.result

where myproposal.result is the result file created in the ./process_proposal.pl step

----------------------------------------------------------------------
How to examine the database:

./verify.pl will check the database for invalid and duplicate entries.
In addition, you can supply any of the following keywords:

help: get a list of the commands.
dump: displays the entire database values.
types: list the valid types currently in the database as well as the next
  unallocated identifer, or the unallocated flag bits.
<type> list all identifiers of type <type>
<dispositon> list all identifiers of a particular dispostion (proposed, approved, spec) ect.
header [full] [path]: verify that the pkcs11t.h header is consistant with the
database. If full is specified, then it expects identifiers that are 
disposition=proposed to be in the header, othersize './verify.pl header' checks
that only approved and spec are in the header. The output include:
 - Entries that are in the database, but missing from the header.
 - Entries that are in both the database and the header, but their value
   is inconsistant.
  - Entries that are in the header, but not in the database. In this last
   case there are some special entries that help reduce the noise of false
   positives. 1) the aliases.db contain a list of entries that are deprecated
   in favor of the 'official' name. The aliases may show up in the header.
   2) Entries of the form CK?_VENDOR_DEFINED and have the value 0x80000000UL
   are ignored.

----------------------------------------------------------------------
How to lookup an identifier in the database:

./lookup identifier

if identifier is a type or disposition, it does the same as ./verify.pl.
identifier could also be a hex value, in which case it does a reverse lookup.
----------------------------------------------------------------------

Format of raw_ids.db:

each line is a record.
{identifier},{value},{type},{disposition}

{identifier} is the PKCS #11 #define value (example: CKM_AES_CBC).
{value} is the value of the identifier in hex.
{type} is the type of identifier. Multiple identifiers with the same type and value is prohibited. Valid types can be listed with:
    $ ./verify.pl types
{dispositon} what is the state of this identifier value pair:
    spec - identifer is in an approved OASIS PKCS #11 spec
    proposed - identifer has been allocated for a proposal
    approved - the proposal with this identifer has been approved by the TC.

------------------------------------------------------------------------

How to verify the header file against the spec:

./parse_doc.pl [commands...] [doc_file] [header_file]
 parse a doc text file and/or a header file and output according
 to the command:
    verbose:  output inconsistancies in the doc_file
    table:  the first two columns of every table in the doc_file
    defines:  all the defines in both the doc_file and header_file
    typedefs:  all the typedefs in both the doc_file and header_file
    structs:  all the structs in both the doc_file and header_file
    doc_defines:  all the defines in the doc_file
    doc_typedefs:  all the typedefs in the doc_file
    doc_structs:  all the structs in the doc_file
    doc_all:  all the parsed values in the doc_file
    header_defines:  all the defines in the header_file
    header_typedefs:  all the typedefs in the header_file
    header_structs:  all the structs in the header_file
    header_all:  all the parsed values in the doc_file
    diff_defines:  the differences betweeen the defines in the doc_file and the header_file
    diff_typedefs: the differences between the typedefs in doc_file and header_file
    diff_structs:  the differences between the structs in doc_file andthe header_file
    diff_all:  all the diffs
if both files are required, the doc_file must be first, if no
commands are supplied, then diff_all is assumed

Between ./verify.pl and ./parse_doc.pl it's possible to make sure all the
defines in the document have been allocated, all the defines that are allocated
or in the document, and the headers are up to date with both.



